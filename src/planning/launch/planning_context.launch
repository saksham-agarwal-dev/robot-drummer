<?xml version="1.0"?>
<launch>
  <!-- Right electric gripper param. Set to true to check for collisions for their links -->
  <arg name="electric_gripper" default="true"/>
  <!-- Set the kinematic tips for the left_arm and right_arm move_groups -->
  <arg name="tip_name" default="right_hand"/>
  <!-- Add controller box collision shape to check for link collisions if set to true-->
  <arg name="controller_box" default="true"/>


  <!-- By default we do not overwrite the URDF. Change the following to true to change the default behavior -->
  <arg name="load_robot_description" default="false"/>

  <!-- The name of the parameter under which the URDF is loaded -->
  <arg name="robot_description" default="robot_description"/>

  <!-- Load universal robot description format (URDF) FIXME when composable URDF -->
  <param if="$(arg load_robot_description)" name="$(arg robot_description)"
      command="$(find xacro)/xacro $(find sawyer_description)/urdf/sawyer.urdf.xacro
          electric_gripper:=$(arg electric_gripper)
          tip_name:=$(arg tip_name)
          controller_box:=$(arg controller_box)"/>

  <!-- The semantic description that corresponds to the URDF -->
  <param name="robot_description_semantic"
      command="$(find xacro)/xacro $(find sawyer_moveit_config)/srdf/sawyer.srdf.xacro
          electric_gripper:=$(arg electric_gripper)<run_depend>cv_bridge</run_depend>
<run_depend>dynamic_reconfigure</run_depend>
<run_depend>baxter_core_msgs</run_depend>
<run_depend>baxter_interface</run_depend>
</package>
This package.xml file is used by ROS tools to understand and manage the package during build, installation, and run-
time. Along with some metadata about the package, the package.xml specifies 11 packages on which baxter_examples
depends on. The packages with <build_depend> are the packages used during the build phase, and the ones with
<run_depend> are used during the runtime phase.
The rospy dependency is important - rospy is the ROS library that Python nodes use to communicate with other
nodes in the computation graph. The corresponding library for C++ nodes is roscpp.
4.3 File system tools
In this section we will pretend we are on the Sawyerbot, so we are going to setup the ROS workspace with the Sawyer
packages. To do this, in every terminal we will run
source /opt/ros/eecsbot_ws/devel/s
          tip_name:=$(arg tip_name)
          controller_box:=$(arg controller_box)"/>
  
  <!-- Load updated joint limits (override information from URDF) -->
  <group ns="$(arg robot_description)_planning">
    <rosparam command="load" file="$(find sawyer_moveit_config)/config/joint_limits.yaml"/>
    <!-- <rosparam command="load" file="$(cwd)/joint_limits.yaml"/> -->
  </group>

  <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
  <group ns="$(arg robot_description)_kinematics">
    <rosparam command="load" file="$(find sawyer_moveit_config)/config/kinematics.yaml"/>
  </group>
  
</launch>
